<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- 每个配置项是有顺序的 -->
<!--<!ELEMENT configuration (properties?, settings?, typeAliases?, typeHandlers?, objectFactory?, -->
<!--objectWrapperFactory?, reflectorFactory?, plugins?, environments?, databaseIdProvider?, mappers?)>-->
<configuration>

    <!-- 属性：这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递 -->
    <!--第三优先：在 properties 元素体内指定的属性首先被读取。-->
    <!--第二优先：然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。-->
    <!--第一优先：最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。-->
    <properties resource="mybatis-config.properties">
        <!-- 启用默认值特性 -->
        <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
        <!--如果你已经使用 ":" 作为属性的键（如：db:username） ，或者你已经在 SQL 定义中使用 OGNL 表达式的三元运算符
                （如： ${tableName != null ? tableName : 'global_constants'}），你应该通过设置特定的属性来修改分隔键名和默认值的字符-->
        <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?::"/>
    </properties>

    <!--这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为-->
    <settings>
        <!--全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存-->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态-->
        <setting name="lazyLoadingEnabled" value="false"/>
        <!--是否允许单一语句返回多结果集（需要驱动支持）-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果-->
        <setting name="useColumnLabel" value="true"/>
        <!--允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作 （配合keyProperty）-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集.
         FULL 会自动映射任意复杂的结果集（无论是否嵌套）-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--指定发现自动映射目标未知列（或者未知属性类型）的行为。-->
        <!--NONE: 不做任何反应-->
        <!--WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)-->
        <!--FAILING: 映射失败 (抛出 SqlSessionException)-->
        <setting name="autoMappingUnknownColumnBehavior" value="NONE"/>
        <!--todo 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新-->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置超时时间，它决定驱动等待数据库响应的秒数 默认未设置，也就是下面这个注释掉-->
        <!--<setting name="defaultStatementTimeout" value="25"/>-->
        <!--为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖 默认未设置，也就是下面这个注释掉-->
        <!--<setting name="defaultFetchSize" value="100"/>-->
        <!--允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为 false-->
        <setting name="safeResultHandlerEnabled" value="true"/>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射-->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <!--MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。
         默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据-->
        <setting name="localCacheScope" value="SESSION"/>
        <!--todo 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定哪个对象的方法触发一次延迟加载-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
        <!--当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)在 3.4.1 及之前的版本默认值为 true-->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--指定动态 SQL 生成的默认语言-->
        <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver"/>
        <!--指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）-->
        <setting name="defaultEnumTypeHandler" value="org.apache.ibatis.type.EnumTypeHandler"/>
        <!--指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，
        这在依赖于 Map.keySet() 或 null 值初始化的时候比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的-->
        <setting name="callSettersOnNulls" value="false"/>
        <!--当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。
        请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2）-->
        <setting name="returnInstanceForEmptyRow" value="false"/>
        <!--指定 MyBatis 增加到日志名称的前缀 默认未设置-->
        <!--<setting name="logPrefix" value="demo222"/>-->
        <!--指定 MyBatis 所用日志的具体实现，未指定时将自动查找 默认未设置-->
        <!--可选值：SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING-->
        <!--<setting name="logImpl" value="SLF4J"/>-->
        <!--指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。MyBatis 3.3 以上默认JAVASSIST-->
        <!--<setting name="proxyFactory" value="JAVASSIST"/>-->
        <!--指定 VFS 的实现 默认未设置 (设置的话为 自定义 VFS 的实现的类全限定名，以逗号分隔)-->
        <!--<setting name="vfsImpl" value=""/>-->
        <!--todo 允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）-->
        <!--<setting name="useActualParamName" value="true"/>-->
        <!--指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。
         这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3）(设置的话为 自定义类全限定名)-->
        <!--<setting name="configurationFactory" value=""/>-->

        <!--以上为示例配置，都取的默认值-->
    </settings>

    <typeAliases>
        <!--类型别名是为 Java 类型设置一个短的名字。 它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余-->
        <!--<typeAlias type="com.zhangwenit.mybatis.demo.model.Person" alias="Person"/>-->
        <!--也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean  配合-->
        <package name="com.zhangwenit.mybatis.spring.demo.model"/>
        <package name="com.zhangwenit.mybatis.spring.demo.criteria"/>
        <package name="com.zhangwenit.mybatis.spring.demo.dto"/>
        <package name="com.zhangwenit.mybatis.spring.demo.enums"/>
    </typeAliases>

    <typeHandlers>
        <!--你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。
        具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口， 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler，
         然后可以选择性地将它映射到一个 JDBC 类型-->
        <typeHandler handler="com.zhangwenit.mybatis.spring.demo.handler.UserTypeHandler"
                     javaType="user" jdbcType="VARCHAR"/>

        <!--可以让 MyBatis 为你查找类型处理器 注意在使用自动发现功能的时候，只能通过注解方式来指定 JDBC 的类型-->
        <!--<package name="com.zhangwenit.mybatis.demo.handler" />-->

        <!--默认情况下，MyBatis 会利用 EnumTypeHandler 来把 Enum 值转换成对应的名字 不过，我们可能不想存储名字，相反我们的 DBA 会坚持使用整形值代码。
        那也一样轻而易举： 在配置文件中把 EnumOrdinalTypeHandler 加到 typeHandlers 中即可， 这样每个 ColorEnum 将通过他们的序数值来映射成对应的整形数值-->
        <!--<typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler" javaType="com.zhangwenit.mybatis.demo.enums.ColorEnum"/>-->
    </typeHandlers>


    <!--可以使用相对于类路径的资源引用， 或完全限定资源定位符（包括 file:/// 的 URL），或类名和包名等-->
    <mappers>
        <!-- 将包内的映射器接口实现全部注册为映射器 todo 当注释了<property name="mapperLocations" value="mapper/**/*.xml"/> Caches collection does not contain value for com.zhangwenit.mybatis.spring.demo.mapper.PersonMapper-->
        <package name="com.zhangwenit.mybatis.spring.demo.mapper"/>
    </mappers>


</configuration>